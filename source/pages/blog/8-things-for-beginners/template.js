const layout = require('../../../partials/layout/template');
const article = require('../../../partials/article/template');

const renderArticleContent = () => `
<p class="paragraph paragraph--lead">
  Я&nbsp;работаю в&nbsp;сфере веб-разработки больше пяти лет, и&nbsp;это похоже на&nbsp;приключение&nbsp;&mdash; знакомство с&nbsp;новыми технологиями и&nbsp;эксперименты с&nbsp;разными подходами. Временами я&nbsp;был успешен, временами я&nbsp;разочаровывался в&nbsp;себе. В&nbsp;этой статье я&nbsp;хочу рассказать вам о&nbsp;некоторых идеях, которые я&nbsp;постепенно осознал, работая веб-разработчиком. Надеюсь, что вас научат чему-то мои ошибки.
</p>

<h3 class="heading heading--2">1. Пишите чистый код</h3>

<p class="paragraph">
  Первое что вы&nbsp;понимаете, когда начинаете работу над большим приложением&nbsp;&mdash; это&nbsp;то, что для отладки требуется куча времени. Возможно вы&nbsp;проведёте больше времени за&nbsp;отладкой, чем за&nbsp;написанием нового кода.
</p>

<p class="paragraph">
  В&nbsp;таких ситуациях чрезвычайно важно писать правильно отформатированный и&nbsp;задокументированный код, соответствующий лучшим практикам. Представьте, что у&nbsp;вас есть сотни строк кода, и&nbsp;вы&nbsp;не&nbsp;имеете понятия о&nbsp;том, какая из&nbsp;них вызывает маленький баг. Ещё хуже будет, если вы&nbsp;напишете нечитаемый код&nbsp;&mdash; через какое-то время вы&nbsp;просто не&nbsp;будете знать, что делает тот или иной кусок кода. Вы&nbsp;точно хотите всех этих проблем? Посмотрите <a href="http://www.sitepoint.com/6-tips-for-writing-better-code">советы по&nbsp;написанию чистого кода</a>.
</p>

<h3 class="heading heading--2">
  2. Язык в&nbsp;первую очередь, фреймворк потом
</h3>

<p class="paragraph">
  Люди зачастую сперва изучают фишки фреймворка, и&nbsp;только потом обращают внимание на&nbsp;язык. Это неправильный путь.
</p>

<p class="paragraph">
  Популярность Django можно отнести к&nbsp;преимуществам Python&nbsp;&mdash; поэтому важно познакомиться с&nbsp;Python перед тем, как браться за&nbsp;Django. Нельзя поступать наоборот.
</p>

<p class="paragraph">
  Простая причина такого подхода заключается в&nbsp;том, что если вы&nbsp;знаете язык&nbsp;&mdash; вы&nbsp;можете понять механизм работы фреймворка. Если вы&nbsp;не&nbsp;имеете никакого представления об&nbsp;языке, вы&nbsp;никак не&nbsp;сможете понять, почему что-то во&nbsp;фреймворке сделано определённым способом.
</p>

<h2 class="heading heading--2">
  3. Изучайте JavaScript, а&nbsp;не&nbsp;jQuery
</h2>

<p class="paragraph">
  JavaScript является самым доступным языком в&nbsp;мире. Любое устройство с&nbsp;браузером может выполнять JavaScript-приложения.
</p>

<p class="paragraph">
  Ошибка, которую совершают начинающие разработчики, заключается в&nbsp;изучении jQuery. Вопросы <a href="https://www.quora.com/I-only-know-jQuery-and-am-not-very-well-versed-with-vanilla-Javascript-Will-this-limit-me-if-I-am-ultimately-trying-to-get-a-job-as-a-junior-front-end-developer-If-so-what-are-some-free-resources-to-expand-my-Javascript-knowledge-Should-I-even-be-thinking-about-things-like-ember-or-angular-yet">вроде этого</a> на&nbsp;Quora дают понять, что jQuery весьма популярен среди людей, которые не&nbsp;имеют понятия о&nbsp;базовых принципах и&nbsp;возможностях JavaScript!
</p>

<p class="paragraph">
  jQuery&nbsp;&mdash; это всего лишь набор вспомогательных функций, написанных на&nbsp;JavaScript. Единственная причина, по&nbsp;которой люди предпочитают jQuery&nbsp;&mdash; это&nbsp;то, что jQuery требует написания меньшего количества кода. Однако последние версии JavaScript (или ECMAScript в&nbsp;оригинале) имеют более дружелюбный синтаксис, благодаря чему <a href="http://youmightnotneedjquery.com/">в&nbsp;jQuery больше нет нужды</a>.
</p>

<p class="paragraph">
  Я&nbsp;не&nbsp;утверждаю, что использовать jQuery неправильно. Я&nbsp;всего лишь говорю вам о&nbsp;том, что надо следовать правильному пути обучения. Если вы&nbsp;не&nbsp;знаете о&nbsp;замыканиях и&nbsp;пространствах имён в&nbsp;JavaScript, как вы&nbsp;объясните использование <code>$</code> в&nbsp;jQuery?
</p>

<h3 class="heading heading--2">
  4. Не&nbsp;просто читайте, а&nbsp;делайте
</h3>

<p class="paragraph">
  Я&nbsp;часто видел разработчиков, которые читали туториалы или даже целые книги без всякой практики. Меня беспокоит одно&nbsp;&mdash; многое&nbsp;ли вы&nbsp;усвоите, только читая?
</p>

<p class="paragraph">
  Если вы&nbsp;хотите изучить Ruby on&nbsp;Rails, попробуйте разработать небольшое приложение в&nbsp;процессе чтения туториалов и&nbsp;документации. Если вы&nbsp;хотите попробовать стэк <abbr title="MongoDB, Express.js, Angular, Node.js">MEAN</abbr>, то&nbsp;запустите его на&nbsp;вашем компьютере и&nbsp;познакомьтесь с&nbsp;различными возможностями&nbsp;&mdash; это лучший способ изучения!
</p>

<h3 class="heading heading--2">5. Дилетант, но&nbsp;не&nbsp;специалист</h3>

<p class="paragraph">
  Хорошо изучать новые технологии, но&nbsp;следует иметь одну технологию для решения большинства задач. Для новичков изучение сразу нескольких языков выглядит весьма заманчиво, но&nbsp;лучше всего изучать только один язык пока вы&nbsp;не&nbsp;достигнете в&nbsp;нём определённого уровня мастерства.
</p>

<p class="paragraph">
  После обретения языка для решения повседневных задач вы&nbsp;можете начать изучать новый язык. Вы&nbsp;также можете поменять ваши предпочтения, но&nbsp;мудрым решением будет освоить новый язык на&nbsp;приемлемом уровне, прежде чем переходить на&nbsp;него. Посмотрите некоторые советы по&nbsp;выбора языка для изучения.
</p>

<h3 class="heading heading--2">
  6. Изучайте системы контроля версий
</h3>

<p class="paragraph">
  В&nbsp;наше время работа над проектом в&nbsp;одинучку&nbsp;&mdash; редкость. Чтобы взаимодействовать с&nbsp;командой, вам придётся изучить системы контроля версий.
</p>

<p class="paragraph">
  Обычно разработчики не&nbsp;изучают контроль версий до&nbsp;тех пор, когда им&nbsp;это не&nbsp;понадобится позарез. Однако контроль версий необходим при работе в&nbsp;команде, и&nbsp;хорошо было&nbsp;бы изучить&nbsp;то, как он&nbsp;работает, а&nbsp;также изучить базовые команды системы контроля версий.
</p>

<h3 class="heading heading--2">7. Учитесь у&nbsp;других</h3>

<p class="paragraph">
  Самостоятельное изучение технологии&nbsp;&mdash; это круто, но&nbsp;иногда можно многому научиться, всего лишь посмотрев на&nbsp;чужой код. Будь то&nbsp;ваши коллеги или какие-то туториалы в&nbsp;интернете&nbsp;&mdash; пытайтесь найти чьи-то подходы к&nbsp;решению определённых проблем. И&nbsp;задавайте вопросы, если это необходимо.
</p>

<p class="paragraph">
  Также для разработчиков важно понимать, что невозможно знать всё на&nbsp;свете, но&nbsp;знания доступны&nbsp;&mdash; всего лишь требуется загуглить&nbsp;их. Если вы&nbsp;&mdash; новичок, и&nbsp;вы&nbsp;застряли на&nbsp;какой-то проблеме, то&nbsp;велика вероятность того, что кто-то до&nbsp;вас уже сталкивался с&nbsp;ней&nbsp;&mdash; надо всего лишь найти решение в&nbsp;интернете.
</p>

<h3 class="heading heading--2">
  8. Просите о&nbsp;кодревью и&nbsp;наслаждайтесь&nbsp;им
</h3>

<p class="paragraph">
На&nbsp;протяжении многих лет кодревью улучшали мои навыки программирования. Просите коллег или знакомых о&nbsp;том, чтобы они проводили кодревью. Это помогает учиться и&nbsp;находить проблемы в&nbsp;вашем подходе к&nbsp;разработке. Если вы&nbsp;найдёте кого-то, кто искренне заинтересован в&nbsp;рассмотрении вашего кода, то&nbsp;относитесь к&nbsp;его ревью серьёзно. Можете взглянуть на&nbsp;<a href="http://www.sitepoint.com/integrated-collaborative-code-reviewing-beanstalk/">продвинутый способ проведения кодревью</a>.
</p>

<p class="paragraph">
  Напоследок&nbsp;&mdash; никогда не&nbsp;делайте кодревью самому себе. Код похож на&nbsp;искусство&nbsp;&mdash; тяжело принять чью-то точку зрения о&nbsp;ваших ошибках, но&nbsp;только это позволит вам стать лучше.
</p>

<p class="paragraph">
  <i>Это перевод статьи <a href="http://www.sitepoint.com/8-things-wish-id-known-started-developer/">8&nbsp;Things I&nbsp;Wish I&rsquo;d Known When I&nbsp;Started as&nbsp;a&nbsp;Web Developer</a> Шомика Дайтари.</i>
</p>
`;

module.exports = (context) =>
  layout(context, article(context, renderArticleContent()));
